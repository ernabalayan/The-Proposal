//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Proposal/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovment"",
            ""id"": ""208a0197-1299-4c65-bd46-17dca7b708b0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bfeeedb5-5971-4a2c-b93d-6d08a2be50ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""14eb0cbc-54c2-43cc-a3a2-a90e90f808b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1f56b524-2656-4673-8b94-fd3556c88b65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dialogue"",
                    ""type"": ""Button"",
                    ""id"": ""9fdf62b4-f86d-4561-96e8-d6bb71da8485"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""8a286128-e2ac-4335-94ec-d1cfaf16e626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""102c60fa-4745-4fae-8e35-ff8c788800a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e1361b55-653f-4cbe-8be7-52d85f5de285"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5555762a-9c77-49f2-9772-aef209ba01b0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7fc2fc8d-a40f-4179-82a8-c4512291024b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3f4df4a-f829-4841-8a9e-b50770e8785d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a2bed252-532b-4fc2-a19b-606738fd6820"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6380ba38-22c2-4f6c-b679-cfb6cae3b703"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae4e8400-8f73-4075-bc15-4c68e5ae1045"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50972b4a-e78e-40c9-b79b-c5981201f64f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovment
        m_PlayerMovment = asset.FindActionMap("PlayerMovment", throwIfNotFound: true);
        m_PlayerMovment_Move = m_PlayerMovment.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovment_PickUp = m_PlayerMovment.FindAction("PickUp", throwIfNotFound: true);
        m_PlayerMovment_Jump = m_PlayerMovment.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovment_Dialogue = m_PlayerMovment.FindAction("Dialogue", throwIfNotFound: true);
        m_PlayerMovment_Sprint = m_PlayerMovment.FindAction("Sprint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovment
    private readonly InputActionMap m_PlayerMovment;
    private IPlayerMovmentActions m_PlayerMovmentActionsCallbackInterface;
    private readonly InputAction m_PlayerMovment_Move;
    private readonly InputAction m_PlayerMovment_PickUp;
    private readonly InputAction m_PlayerMovment_Jump;
    private readonly InputAction m_PlayerMovment_Dialogue;
    private readonly InputAction m_PlayerMovment_Sprint;
    public struct PlayerMovmentActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovmentActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovment_Move;
        public InputAction @PickUp => m_Wrapper.m_PlayerMovment_PickUp;
        public InputAction @Jump => m_Wrapper.m_PlayerMovment_Jump;
        public InputAction @Dialogue => m_Wrapper.m_PlayerMovment_Dialogue;
        public InputAction @Sprint => m_Wrapper.m_PlayerMovment_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovmentActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovmentActions instance)
        {
            if (m_Wrapper.m_PlayerMovmentActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnMove;
                @PickUp.started -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnPickUp;
                @Jump.started -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnJump;
                @Dialogue.started -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnDialogue;
                @Dialogue.performed -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnDialogue;
                @Dialogue.canceled -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnDialogue;
                @Sprint.started -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerMovmentActionsCallbackInterface.OnSprint;
            }
            m_Wrapper.m_PlayerMovmentActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dialogue.started += instance.OnDialogue;
                @Dialogue.performed += instance.OnDialogue;
                @Dialogue.canceled += instance.OnDialogue;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }
        }
    }
    public PlayerMovmentActions @PlayerMovment => new PlayerMovmentActions(this);
    public interface IPlayerMovmentActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDialogue(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
}
